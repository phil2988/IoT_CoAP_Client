// <auto-generated />
using System;
using CoAP_Backend_Api.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoAP_Backend_Api.Migrations
{
    [DbContext(typeof(WeatherContext))]
    [Migration("20221209083738_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoAP_Backend_Api.Models.Measurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeMeasured")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("CoAP_Backend_Api.Models.SensorMeasurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MeasurementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SensorNumber")
                        .HasColumnType("int");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementId");

                    b.ToTable("SensorMeasurement");
                });

            modelBuilder.Entity("CoAP_Backend_Api.Models.SensorMeasurement", b =>
                {
                    b.HasOne("CoAP_Backend_Api.Models.Measurement", null)
                        .WithMany("SensorMeasurements")
                        .HasForeignKey("MeasurementId");
                });

            modelBuilder.Entity("CoAP_Backend_Api.Models.Measurement", b =>
                {
                    b.Navigation("SensorMeasurements");
                });
#pragma warning restore 612, 618
        }
    }
}
